// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  firebaseUid String    @unique
  email       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  keywords    Keyword[]
  apiKeys     ApiKey[]
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique @default(cuid()) // Using cuid for simplicity, consider a more robust key generation
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  revokedAt DateTime?
}

enum KeywordStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model Keyword {
  id             String          @id @default(cuid())
  text           String
  status         KeywordStatus   @default(PENDING)
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  scrapeAttempts ScrapeAttempt[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

enum ScrapeAttemptStatus {
  SUCCESS
  FAILED
}

model ScrapeAttempt {
  id        String              @id @default(cuid())
  html      String?
  adCount   Int?
  linkCount Int?
  status    ScrapeAttemptStatus
  error     String?
  keywordId String
  keyword   Keyword             @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  createdAt DateTime            @default(now())
}
